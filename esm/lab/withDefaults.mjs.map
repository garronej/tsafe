{"version":3,"file":"withDefaults.mjs","sources":["../../dist/src/lab/withDefaults.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/ban-ts-comment */\n/* eslint-disable @typescript-eslint/no-explicit-any */\nimport \"../tools/Object.fromEntries\";\n/**\n * Like Function.prototype.bind() but for a function that\n * receives their parameters wrapped in an object.\n * See documentation for more details:\n * https://docs.tsafe.dev/withdefaults\n */\nexport function withDefaults<Params extends Record<string, unknown>, DefaultKey extends keyof Params, R>(\n    f: (params: Params) => R,\n    defaultParams: keyof Params extends never\n        ? Record<string, never>\n        : { [Key in DefaultKey]: Params[Key] },\n): (\n    params: { [Key in keyof Omit<Params, DefaultKey>]: Params[Key] } & {\n        defaultsOverwrite?: { [Key in DefaultKey]?: [Params[Key]] };\n    },\n) => R {\n    return params => {\n        const { defaultsOverwrite = {}, ...actualParams } = params;\n\n        return f({\n            ...defaultParams,\n            ...actualParams,\n            ...Object.fromEntries(\n                Object.entries(defaultsOverwrite)\n                    .filter(([, value]) => value !== undefined)\n                    .map(([key, value]) => [key, (value as any)[0]]),\n            ),\n        } as any);\n    };\n}\n"],"names":[],"mappings":";;AAAA;AACA;AAEA;;;;;AAKG;AACa,SAAA,YAAY,CACxB,CAAwB,EACxB,aAE0C,EAAA;IAM1C,OAAO,MAAM,IAAG;QACZ,MAAM,EAAE,iBAAiB,GAAG,EAAE,EAAE,GAAG,YAAY,EAAE,GAAG,MAAM,CAAC;AAE3D,QAAA,OAAO,CAAC,CAAC;AACL,YAAA,GAAG,aAAa;AAChB,YAAA,GAAG,YAAY;YACf,GAAG,MAAM,CAAC,WAAW,CACjB,MAAM,CAAC,OAAO,CAAC,iBAAiB,CAAC;AAC5B,iBAAA,MAAM,CAAC,CAAC,GAAG,KAAK,CAAC,KAAK,KAAK,KAAK,SAAS,CAAC;AAC1C,iBAAA,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,KAAK,CAAC,KAAK,CAAC,GAAG,EAAG,KAAa,CAAC,CAAC,CAAC,CAAC,CAAC,CACvD;AACG,SAAA,CAAC,CAAC;AACd,KAAC,CAAC;AACN;;;;"}